@page "/login"
@using Microsoft.AspNetCore.Components.Authorization;
@using mikaeleriksson.Client.Services.Interfaces;
@using mikaeleriksson.Shared.DTOs.Login;
@inject IAuthService _authService
@inject ISessionStorageService _sessionStorage
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider


<PageTitle>Logga in</PageTitle>


<div class="container" style="height:70vh">


<h3 class="mt-5">Logga in</h3>



<div class="col-lg-3 col-sm-12 mt-3">


<EditForm Model="_user" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label" for="email">Email</label>
        <InputText class="form-control" id="email" @bind-Value="_user.Email" />
    </div>
    <div class="mb-3">
            <label class="form-label" for="password">Lösenord</label>
            <InputText class="form-control" id="password" @bind-Value="_user.Password" type="password" />
    </div>
    <ValidationSummary />
    <button type="submit" class="btn btn-primary">Logga in</button>
</EditForm>
<div class="text-danger">
    <span>@_errorMessage</span>
</div>
    </div>
</div>
@code {

    UserLoginDto _user = new();
    string _errorMessage = string.Empty;

    async Task HandleSubmit()
    {
        var result = await _authService.LoginAsync(_user);

        if (result.Success)
        {
            _errorMessage = string.Empty;

            _sessionStorage.SetItem("authToken", result.Data);
            await _authenticationStateProvider.GetAuthenticationStateAsync();
            _navigationManager.NavigateTo("");
        }
        else
        {
            _errorMessage = result.Message;
        }

    }

}